1. 进程组

进程组是一个或多个进程的集合。它们与同一作业相关联，可以接受来自同一终端的各种信号（说出了进程组的作用，即接受来自同一终端的信号。假设一个任务需要并发100个进程，可以将这100个进程设为一个进程组。当用户要终止这个任务时，可以通过杀死整个进程组来一次性关闭）。

进程组的ID等于组长进程ID。组长进程可以创建一个进程组，创建该组中的进程(说明子进程跟父进程天然的属于同一个进程组)，然后终止。只要进程组中有一个进程存在，则该进程组就存在，与其组长进程是否终止无关。进程组的最后一个进程可以终止，或者转移到另一个进程组。

进程可以调用setpgid将它自己或它的子进程加入一个现有的组或者一个新进程组。

2. 会话

会话(session)是一个或多个进程组的集合。会话的原意是指用户从登录系统直到登出的整个过程。

用户登录系统会产生新的会话，也可以让进程调用setsid函数凭空建立新会话。如果调用此函数的进程不是一个进程组的组长，则创建一个新会话，该进程变成新会话首进程(session leader)，成为一个新进程组的组长进程，并且该进程没有控制终端（命令界面）。如果该调用进程已经是一个进程组的组长，则此函数出错。

3. 控制终端

1). 一个会话可以有一个控制终端(controlling terminal)，有些会话没有控制终端。

2). 建立与控制终端连接的会话首进程被称为控制进程(controlling process)，往往是bash。

3). 一个会话中的几个进程组可被分成一个前台进程组(forkground process group)和几个后台进程组(background process group)。

4). 如果一个会话有一个控制终端，则它有一个前台进程组，前台进程组的进程可以从控制终端获得输入，该会话的所有进程（包括后台进程组）都可以向控制终端输出。键入终端的中断键(DELETE或Ctrl+C)会将中断信号发送给前台进程组的所有进程。键入终端的退出键(Ctrl+\)会将退出信号发送给前台进程组的所有进程。

5). 用户在执行命令时，可以在命令的结尾添加“&”符号，表示将命令放入后台执行。这样该命令对应的进程组即为后台进程组。一旦会话结束（控制终端被关闭），则该会话的所有进程都会收到SIGHUP而结束。为了让后台进程不受牵连，命令如下：nohup command > logpath 2>&1 &，意思是，command后台执行，标准输出1重定向到logpath，标准错误2重定向到标准输出1，且忽略SIGHUP信号。

6). 调用setsid函数建立的新会话没有控制终端，只有后台进程组，但在SVR4（一个常见的系统版本）中，当会话头进程打开终端设备时，如果这个终端不是其他会话的控制终端，该终端将自动成为这个会话的控制终端。所以会话头进程仍可能蜕变为前台进程，不保险。为此，我们让头进程再fork一个子进程，并让头进程结束（没有控制终端，不会终止会话，使子进程收到SIGHUP信号），则子进程彻底摆脱控制终端，成为永久后台进程，即守护进程。可上网搜索创建守护进程的步骤，对照理解。

7). 若是远程登录，如果终端检测到调制解调器(或网络)已经断开连接，则将SIGHUP信号发送给控制进程(会话首进程)。
